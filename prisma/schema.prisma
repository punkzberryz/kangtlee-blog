// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String    @id
  email       String?   @unique
  googleId    String?   @unique
  lineLoginId String?   @unique
  displayName String
  bio         String?
  imgUrl      String?
  sessions    Session[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Post        Post[]

  @@index([email])
  @@index([googleId])
  @@index([lineLoginId])
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Post {
  id          Int           @id @default(autoincrement())
  slug        String        @unique
  title       String
  keywords    String
  description String
  content     String        @db.Text
  imgUrl      String
  isPublished Boolean       @default(false)
  authorId    String
  author      User?         @relation(fields: [authorId], references: [id])
  category    PostCategory? @relation("CategoryToPost", fields: [categoryId], references: [id])
  categoryId  Int
  Comment     Comment[]
  TagsOnPosts TagsOnPosts[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([slug])
}

model PostCategory {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[] @relation("CategoryToPost")
}

model PostTag {
  id          Int           @id @default(autoincrement())
  name        String
  TagsOnPosts TagsOnPosts[]
}

model TagsOnPosts {
  post   Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  tag    PostTag @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId  Int

  @@id([postId, tagId])
}

model Comment {
  id        String    @id @default(cuid())
  postId    Int
  Post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   String    @db.VarChar(255)
  name      String
  email     String
  website   String?
  parent    Comment?  @relation("ParentToChildComments", fields: [parentId], references: [id], onDelete: Cascade)
  parentId  String?
  children  Comment[] @relation("ParentToChildComments")
  createdAt DateTime  @default(now())

  @@index([postId])
  @@index([parentId])
}
